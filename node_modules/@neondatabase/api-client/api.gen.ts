/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** @min 0.25 */
export type ComputeUnit = number;

/**
 * The Neon compute provisioner.
 * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
 */
export enum Provisioner {
  K8SPod = 'k8s-pod',
  K8SNeonvm = 'k8s-neonvm',
}

export interface PaginationResponse {
  /**
   * Cursor based pagination is used. The user must pass the cursor as is to the backend.
   * For more information about cursor based pagination, see
   * https://learn.microsoft.com/en-us/ef/core/querying/pagination#keyset-pagination
   */
  pagination?: Pagination;
}

/**
 * Cursor based pagination is used. The user must pass the cursor as is to the backend.
 * For more information about cursor based pagination, see
 * https://learn.microsoft.com/en-us/ef/core/querying/pagination#keyset-pagination
 * @example {"cursor":"2022-12-07T00:45:05.262011Z"}
 */
export interface Pagination {
  /** @minLength 1 */
  cursor: string;
}

/** Empty response. */
export type EmptyResponse = object;

export interface ApiKeyCreateRequest {
  /** A user-specified API key name. This value is required when creating an API key. */
  key_name: string;
}

export interface ApiKeyCreateResponse {
  /**
   * The API key ID
   * @format int64
   */
  id: number;
  /** The generated 64-bit token required to access the Neon API */
  key: string;
  /** The user-specified API key name */
  name: string;
  /**
   * A timestamp indicating when the API key was created
   * @format date-time
   */
  created_at: string;
}

export interface ApiKeyRevokeResponse {
  /**
   * The API key ID
   * @format int64
   */
  id: number;
  /** The user-specified API key name */
  name: string;
  /** A `true` or `false` value indicating whether the API key is revoked */
  revoked: boolean;
  /**
   * A timestamp indicating when the API was last used
   * @format date-time
   */
  last_used_at?: string | null;
  /** The IP address from which the API key was last used */
  last_used_from_addr: string;
}

export interface ApiKeysListResponseItem {
  /**
   * The API key ID
   * @format int64
   */
  id: number;
  /** The user-specified API key name */
  name: string;
  /**
   * A timestamp indicating when the API key was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the API was last used
   * @format date-time
   */
  last_used_at?: string | null;
  /** The IP address from which the API key was last used */
  last_used_from_addr: string;
}

/** @example [{"id":"a07f8772-1877-4da9-a939-3a3ae62d1d8d","project_id":"spring-example-302709","branch_id":"br-wispy-meadow-118737","endpoint_id":"ep-silent-smoke-806639","action":"create_branch","status":"running","failures_count":0,"created_at":"2022-11-08T23:33:16Z","updated_at":"2022-11-08T23:33:20Z","total_duration_ms":400},{"id":"d8ac46eb-a757-42b1-9907-f78322ee394e","project_id":"spring-example-302709","branch_id":"br-wispy-meadow-118737","endpoint_id":"ep-silent-smoke-806639","action":"start_compute","status":"finished","failures_count":0,"created_at":"2022-11-15T20:02:00Z","updated_at":"2022-11-15T20:02:02Z","total_duration_ms":200}] */
export interface Operation {
  /**
   * The operation ID
   * @format uuid
   */
  id: string;
  /** The Neon project ID */
  project_id: string;
  /** The branch ID */
  branch_id?: string;
  /** The endpoint ID */
  endpoint_id?: string;
  /** The action performed by the operation */
  action: OperationAction;
  /** The status of the operation */
  status: OperationStatus;
  /** The error that occured */
  error?: string;
  /**
   * The number of times the operation failed
   * @format int32
   */
  failures_count: number;
  /**
   * A timestamp indicating when the operation was last retried
   * @format date-time
   */
  retry_at?: string;
  /**
   * A timestamp indicating when the operation was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the operation status was last updated
   * @format date-time
   */
  updated_at: string;
  /**
   * The total duration of the operation in milliseconds
   * @format int32
   */
  total_duration_ms: number;
}

export interface OperationResponse {
  operation: Operation;
}

export interface OperationsResponse {
  operations: Operation[];
}

/** The action performed by the operation */
export enum OperationAction {
  CreateCompute = 'create_compute',
  CreateTimeline = 'create_timeline',
  StartCompute = 'start_compute',
  SuspendCompute = 'suspend_compute',
  ApplyConfig = 'apply_config',
  CheckAvailability = 'check_availability',
  DeleteTimeline = 'delete_timeline',
  CreateBranch = 'create_branch',
  TenantIgnore = 'tenant_ignore',
  TenantAttach = 'tenant_attach',
  TenantDetach = 'tenant_detach',
  TenantReattach = 'tenant_reattach',
  ReplaceSafekeeper = 'replace_safekeeper',
  DisableMaintenance = 'disable_maintenance',
  ApplyStorageConfig = 'apply_storage_config',
  PrepareSecondaryPageserver = 'prepare_secondary_pageserver',
  SwitchPageserver = 'switch_pageserver',
}

/** The status of the operation */
export enum OperationStatus {
  Running = 'running',
  Finished = 'finished',
  Failed = 'failed',
  Scheduling = 'scheduling',
}

/**
 * Essential data about the project. Full data is available at the getProject endpoint.
 * @example {"id":"spring-example-302709","platform_id":"aws","region_id":"aws-us-east-2","name":"spring-example-302709","provisioner":"k8s-pod","pg_version":15,"proxy_host":"us-east-2.aws.neon.tech","store_passwords":true,"creation_source":"console","created_at":"2022-12-13T01:30:55Z","updated_at":"2022-12-13T01:30:55Z"}
 */
export interface ProjectListItem {
  /** The project ID */
  id: string;
  /** The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`. */
  platform_id: string;
  /** The region identifier */
  region_id: string;
  /** The project name */
  name: string;
  /**
   * The Neon compute provisioner.
   * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
   */
  provisioner: Provisioner;
  /** A collection of settings for a Neon endpoint */
  default_endpoint_settings?: DefaultEndpointSettings;
  settings?: ProjectSettingsData;
  /** The major Postgres version number. Currently supported versions are `14`, `15`, and `16`. */
  pg_version: PgVersion;
  /** The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`). */
  proxy_host: string;
  /**
   * The logical size limit for a branch. The value is in MiB.
   * @format int64
   */
  branch_logical_size_limit: number;
  /**
   * The logical size limit for a branch. The value is in B.
   * @format int64
   */
  branch_logical_size_limit_bytes: number;
  /** Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
  store_passwords: boolean;
  /**
   * Control plane observed endpoints of this project being active this amount of wall-clock time.
   * @format int64
   * @min 0
   */
  active_time: number;
  /**
   * DEPRECATED. Use data from the getProject endpoint instead.
   * @deprecated
   * @format int64
   */
  cpu_used_sec: number;
  /**
   * A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
   * @format date-time
   */
  maintenance_starts_at?: string;
  /** The project creation source */
  creation_source: string;
  /**
   * A timestamp indicating when the project was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the project was last updated
   * @format date-time
   */
  updated_at: string;
  /**
   * The current space occupied by the project in storage, in bytes. Synthetic storage size combines the logical data size and Write-Ahead Log (WAL) size for all branches in a project.
   * @format int64
   */
  synthetic_storage_size?: number;
  /**
   * DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
   * A timestamp indicating when the project quota resets
   * @deprecated
   * @format date-time
   */
  quota_reset_at?: string;
  owner_id: string;
  /**
   * The most recent time when any endpoint of this project was active.
   *
   * Omitted when observed no actitivy for endpoints of this project.
   * @format date-time
   */
  compute_last_active_at?: string;
}

/** @example {"id":"spring-example-302709","platform_id":"aws","region_id":"aws-us-east-2","name":"spring-example-302709","provisioner":"k8s-pod","pg_version":15,"proxy_host":"us-east-2.aws.neon.tech","store_passwords":true,"creation_source":"console","history_retention_seconds":604800,"created_at":"2022-12-13T01:30:55Z","updated_at":"2022-12-13T01:30:55Z","owner":{"email":"some@email.com","branches_limit":10,"subscription_type":"pro"}} */
export interface Project {
  /**
   * Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
   * The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  data_storage_bytes_hour: number;
  /**
   * Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
   * Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  data_transfer_bytes: number;
  /**
   * Bytes. Amount of WAL that travelled through storage for given project across all branches.
   * The value has some lag. The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  written_data_bytes: number;
  /**
   * Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
   * The value has some lag. The value is reset at the beginning of each billing period.
   * Examples:
   * 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
   * 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
   * @format int64
   * @min 0
   */
  compute_time_seconds: number;
  /**
   * Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
   * The value has some lag.
   * The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  active_time_seconds: number;
  /**
   * DEPRECATED, use compute_time instead.
   * @deprecated
   * @format int64
   */
  cpu_used_sec: number;
  /** The project ID */
  id: string;
  /** The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`. */
  platform_id: string;
  /** The region identifier */
  region_id: string;
  /** The project name */
  name: string;
  /**
   * The Neon compute provisioner.
   * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
   */
  provisioner: Provisioner;
  /** A collection of settings for a Neon endpoint */
  default_endpoint_settings?: DefaultEndpointSettings;
  settings?: ProjectSettingsData;
  /** The major Postgres version number. Currently supported versions are `14`, `15`, and `16`. */
  pg_version: PgVersion;
  /** The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`). */
  proxy_host: string;
  /**
   * The logical size limit for a branch. The value is in MiB.
   * @format int64
   */
  branch_logical_size_limit: number;
  /**
   * The logical size limit for a branch. The value is in B.
   * @format int64
   */
  branch_logical_size_limit_bytes: number;
  /** Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
  store_passwords: boolean;
  /**
   * A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
   * @format date-time
   */
  maintenance_starts_at?: string;
  /** The project creation source */
  creation_source: string;
  /**
   * The number of seconds to retain point-in-time restore (PITR) backup history for this project.
   * @format int64
   */
  history_retention_seconds: number;
  /**
   * A timestamp indicating when the project was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the project was last updated
   * @format date-time
   */
  updated_at: string;
  /**
   * The current space occupied by the project in storage, in bytes. Synthetic storage size combines the logical data size and Write-Ahead Log (WAL) size for all branches in a project.
   * @format int64
   */
  synthetic_storage_size?: number;
  /**
   * A date-time indicating when Neon Cloud started measuring consumption for current consumption period.
   * @format date-time
   */
  consumption_period_start: string;
  /**
   * A date-time indicating when Neon Cloud plans to stop measuring consumption for current consumption period.
   * @format date-time
   */
  consumption_period_end: string;
  /**
   * DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
   * A timestamp indicating when the project quota resets.
   * @deprecated
   * @format date-time
   */
  quota_reset_at?: string;
  owner_id: string;
  owner?: ProjectOwnerData;
  /**
   * The most recent time when any endpoint of this project was active.
   *
   * Omitted when observed no actitivy for endpoints of this project.
   * @format date-time
   */
  compute_last_active_at?: string;
}

export interface ProjectCreateRequest {
  project: {
    settings?: ProjectSettingsData;
    /** The project name */
    name?: string;
    branch?: {
      /** The branch name. If not specified, the default branch name will be used. */
      name?: string;
      /** The role name. If not specified, the default role name will be used. */
      role_name?: string;
      /** The database name. If not specified, the default database name will be used. */
      database_name?: string;
    };
    /**
     * DEPRECATED, use default_endpoint_settings.autoscaling_limit_min_cu instead.
     *
     * The minimum number of Compute Units. The minimum value is `0.25`.
     * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     * @deprecated
     */
    autoscaling_limit_min_cu?: ComputeUnit;
    /**
     * DEPRECATED, use default_endpoint_settings.autoscaling_limit_max_cu instead.
     *
     * The maximum number of Compute Units. See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     * @deprecated
     */
    autoscaling_limit_max_cu?: ComputeUnit;
    /**
     * The Neon compute provisioner.
     * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
     */
    provisioner?: Provisioner;
    /** The region identifier. Refer to our [Regions](https://neon.tech/docs/introduction/regions) documentation for supported regions. Values are specified in this format: `aws-us-east-1` */
    region_id?: string;
    /** A collection of settings for a Neon endpoint */
    default_endpoint_settings?: DefaultEndpointSettings;
    /** The major Postgres version number. Currently supported versions are `14`, `15`, and `16`. */
    pg_version?: PgVersion;
    /** Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
    store_passwords?: boolean;
    /**
     * The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
     * The default is 604800 seconds (7 days).
     * @format int64
     * @min 0
     * @max 2592000
     */
    history_retention_seconds?: number;
  };
}

export interface ProjectUpdateRequest {
  project: {
    settings?: ProjectSettingsData;
    /** The project name */
    name?: string;
    /** A collection of settings for a Neon endpoint */
    default_endpoint_settings?: DefaultEndpointSettings;
    /**
     * The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
     * The default is 604800 seconds (7 days).
     * @format int64
     * @min 0
     * @max 2592000
     */
    history_retention_seconds?: number;
  };
}

export interface ProjectSettingsData {
  /**
   * Per-project consumption quota. If the quota is exceeded, all active computes
   * are automatically suspended and it will not be possible to start them with
   * an API method call or incoming proxy connections. The only exception is
   * `logical_size_bytes`, which is applied on per-branch basis, i.e., only the
   * compute on the branch that exceeds the `logical_size` quota will be suspended.
   *
   * Quotas are enforced based on per-project consumption metrics with the same names,
   * which are reset at the end of each billing period (the first day of the month).
   * Logical size is also an exception in this case, as it represents the total size
   * of data stored in a branch, so it is not reset.
   *
   * A zero or empty quota value means 'unlimited'.
   */
  quota?: ProjectQuota;
  /**
   * A list of IP addresses that are allowed to connect to the compute endpoint.
   * If the list is empty or not set, all IP addresses are allowed.
   * If primary_branch_only is true, the list will be applied only to the primary branch.
   */
  allowed_ips?: AllowedIps;
  /**
   * Sets wal_level=logical for all compute endpoints in this project.
   * All active endpoints will be suspended.
   * Once enabled, logical replication cannot be disabled.
   */
  enable_logical_replication?: boolean;
}

export interface ProjectResponse {
  project: Project;
}

export interface ProjectsResponse {
  projects: ProjectListItem[];
}

export interface ProjectPermission {
  id: string;
  granted_to_email: string;
  /** @format date-time */
  granted_at: string;
  /** @format date-time */
  revoked_at?: string;
}

export interface ProjectPermissions {
  project_permissions: ProjectPermission[];
}

export interface GrantPermissionToProjectRequest {
  email: string;
}

export interface ProjectsConsumptionResponse {
  projects: ProjectConsumption[];
  /** @format int64 */
  periods_in_response: number;
}

export interface ProjectConsumption {
  /** The project ID */
  project_id: string;
  /**
   * The Id of the consumption period, used to reference the `previous_period_id` field.
   * @format uuid
   */
  period_id: string;
  /**
   * Bytes-Hour. The amount of storage the project consumed during the billing period. Expect some lag in the reported value.
   * The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  data_storage_bytes_hour: number;
  /**
   * The timestamp of the last update of the `data_storage_bytes_hour` field.
   * @format date-time
   */
  data_storage_bytes_hour_updated_at?: string;
  /**
   * Bytes. The current space occupied by project in storage. Expect some lag in the reported value.
   * @format int64
   * @min 0
   */
  synthetic_storage_size: number;
  /**
   * The timestamp of the last update of the `synthetic_storage_size` field.
   * @format date-time
   */
  synthetic_storage_size_updated_at?: string;
  /**
   * Bytes. The egress traffic from the Neon cloud to the client for the project over the billing period.
   * Includes egress traffic for deleted endpoints. Expect some lag in the reported value. The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  data_transfer_bytes: number;
  /**
   * Timestamp of the last update of `data_transfer_bytes` field
   * @format date-time
   */
  data_transfer_bytes_updated_at?: string;
  /**
   * Bytes. The Amount of WAL that travelled through storage for given project for all branches.
   * Expect some lag in the reported value. The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  written_data_bytes: number;
  /**
   * The timestamp of the last update of `written_data_bytes` field.
   * @format date-time
   */
  written_data_bytes_updated_at?: string;
  /**
   * Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
   * Expect some lag in the reported value. The value is reset at the beginning of each billing period.
   * Examples:
   * 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
   * 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
   * @format int64
   * @min 0
   */
  compute_time_seconds: number;
  /**
   * The timestamp of the last update of `compute_time_seconds` field.
   * @format date-time
   */
  compute_time_seconds_updated_at?: string;
  /**
   * Seconds. The amount of time that compute endpoints in this project have been active.
   * Expect some lag in the reported value.
   *
   * The value is reset at the beginning of each billing period.
   * @format int64
   * @min 0
   */
  active_time_seconds: number;
  /**
   * The timestamp of the last update of the `active_time_seconds` field.
   * @format date-time
   */
  active_time_seconds_updated_at?: string;
  /**
   * A timestamp indicating when the period was last updated.
   * @format date-time
   */
  updated_at: string;
  /**
   * The start of the consumption period.
   * @format date-time
   */
  period_start: string;
  /**
   * The end of the consumption period.
   * @format date-time
   */
  period_end: string | null;
  /**
   * The `period_id` of the previous consumption period.
   * @format uuid
   */
  previous_period_id: string | null;
}

export interface ProjectLimits {
  limits: {
    /** @format int64 */
    active_time: number;
    max_projects: number;
    max_branches: number;
    /** @format float64 */
    max_autoscaling_cu: number;
    /** @format int64 */
    cpu_seconds: number;
    max_active_endpoints: number;
    max_read_only_endpoints: number;
    max_allowed_ips: number;
    max_monitoring_retention_hours: number;
  };
  [key: string]: any;
}

/** @example {"id":"br-wispy-meadow-118737","project_id":"spring-example-302709","parent_id":"br-aged-salad-637688","parent_lsn":"0/1DE2850","name":"dev2","protected":false,"current_state":"ready","creation_source":"console","created_at":"2022-11-30T19:09:48Z","updated_at":"2022-12-01T19:53:05Z","primary":true} */
export interface Branch {
  /** The branch ID. This value is generated when a branch is created. A `branch_id` value has a `br` prefix. For example: `br-small-term-683261`. */
  id: string;
  /** The ID of the project to which the branch belongs */
  project_id: string;
  /** The `branch_id` of the parent branch */
  parent_id?: string;
  /** The Log Sequence Number (LSN) on the parent branch from which this branch was created */
  parent_lsn?: string;
  /**
   * The point in time on the parent branch from which this branch was created
   * @format date-time
   */
  parent_timestamp?: string;
  /** The branch name */
  name: string;
  /** The branch state */
  current_state: BranchState;
  /** The branch state */
  pending_state?: BranchState;
  /**
   * The logical size of the branch, in bytes
   * @format int64
   */
  logical_size?: number;
  /** The branch creation source */
  creation_source: string;
  /** Whether the branch is the project's primary branch */
  primary: boolean;
  /** Whether the branch is protected */
  protected: boolean;
  /**
   * CPU seconds used by all of the branch's compute endpoints, including deleted ones.
   * This value is reset at the beginning of each billing period.
   * Examples:
   * 1. A branch that uses 1 CPU for 1 second is equal to `cpu_used_sec=1`.
   * 2. A branch that uses 2 CPUs simultaneously for 1 second is equal to `cpu_used_sec=2`.
   * @deprecated
   * @format int64
   */
  cpu_used_sec: number;
  /** @format int64 */
  compute_time_seconds: number;
  /** @format int64 */
  active_time_seconds: number;
  /** @format int64 */
  written_data_bytes: number;
  /** @format int64 */
  data_transfer_bytes: number;
  /**
   * A timestamp indicating when the branch was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the branch was last updated
   * @format date-time
   */
  updated_at: string;
  /**
   * A timestamp indicating when the branch was last reset
   * @format date-time
   */
  last_reset_at?: string;
}

/** The branch state */
export enum BranchState {
  Init = 'init',
  Ready = 'ready',
}

export interface BranchCreateRequestEndpointOptions {
  /**
   * The compute endpoint type. Either `read_write` or `read_only`.
   * The `read_only` compute endpoint type is not yet supported.
   */
  type: EndpointType;
  /**
   * The minimum number of Compute Units. The minimum value is `0.25`.
   *     See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
   *     for more information.
   */
  autoscaling_limit_min_cu?: ComputeUnit;
  /**
   * The maximum number of Compute Units.
   *     See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
   *     for more information.
   */
  autoscaling_limit_max_cu?: ComputeUnit;
  /**
   * The Neon compute provisioner.
   * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
   */
  provisioner?: Provisioner;
  /**
   * Duration of inactivity in seconds after which the compute endpoint is
   * automatically suspended. The value `0` means use the global default.
   * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
   * The minimum value is `60` seconds (1 minute).
   * The maximum value is `604800` seconds (1 week). For more information, see
   * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
   */
  suspend_timeout_seconds?: SuspendTimeoutSeconds;
}

export interface BranchCreateRequest {
  endpoints?: BranchCreateRequestEndpointOptions[];
  branch?: {
    /** The `branch_id` of the parent branch. If omitted or empty, the branch will be created from the project's primary branch. */
    parent_id?: string;
    /** The branch name */
    name?: string;
    /** A Log Sequence Number (LSN) on the parent branch. The branch will be created with data from this LSN. */
    parent_lsn?: string;
    /**
     * A timestamp identifying a point in time on the parent branch. The branch will be created with data starting from this point in time.
     * The timestamp must be provided in ISO 8601 format; for example: `2024-02-26T12:00:00Z`.
     * @format date-time
     */
    parent_timestamp?: string;
    /** Whether the branch is protected */
    protected?: boolean;
  };
}

export interface BranchUpdateRequest {
  branch: {
    name?: string;
    protected?: boolean;
  };
}

export interface BranchRestoreRequest {
  /**
   * The `branch_id` of the restore source branch.
   * If `source_timestamp` and `source_lsn` are omitted, the branch will be restored to head.
   * If `source_branch_id` is equal to the branch's id, `source_timestamp` or `source_lsn` is required.
   */
  source_branch_id: string;
  /** A Log Sequence Number (LSN) on the source branch. The branch will be restored with data from this LSN. */
  source_lsn?: string;
  /**
   * A timestamp identifying a point in time on the source branch. The branch will be restored with data starting from this point in time.
   * The timestamp must be provided in ISO 8601 format; for example: `2024-02-26T12:00:00Z`.
   * @format date-time
   */
  source_timestamp?: string;
  /**
   * If not empty, the previous state of the branch will be saved to a branch with this name.
   * If the branch has children or the `source_branch_id` is equal to the branch id, this field is required. All existing child branches will be moved to the newly created branch under the name `preserve_under_name`.
   */
  preserve_under_name?: string;
}

export interface BranchResponse {
  branch: Branch;
}

export interface BranchSchemaResponse {
  sql?: string;
}

export interface BranchesResponse {
  branches: Branch[];
}

export interface ConnectionParameters {
  /** Database name */
  database: string;
  /** Password for the role */
  password: string;
  /** Role name */
  role: string;
  /** Hostname */
  host: string;
  /** Pooler hostname */
  pooler_host: string;
}

export interface ConnectionDetails {
  /**
   * The connection URI is defined as specified here: [Connection URIs](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS)
   * The connection URI can be used to connect to a Postgres database with psql or defined in a DATABASE_URL environment variable.
   */
  connection_uri: string;
  connection_parameters: ConnectionParameters;
}

export interface ConnectionURIResponse {
  /** The connection URI. */
  uri: string;
}

/** @example {"host":"ep-silent-smoke-806639.us-east-2.aws.neon.tech","id":"ep-silent-smoke-806639","project_id":"spring-example-302709","branch_id":"br-wispy-meadow-118737","autoscaling_limit_min_cu":1,"autoscaling_limit_max_cu":1,"region_id":"aws-us-east-2","type":"read_write","current_state":"init","pending_state":"active","settings":{"pg_settings":{}},"pooler_enabled":false,"pooler_mode":"transaction","disabled":false,"passwordless_access":true,"creation_source":"console","created_at":"2022-12-03T15:37:07Z","updated_at":"2022-12-03T15:37:07Z","proxy_host":"us-east-2.aws.neon.tech","suspend_timeout_seconds":0} */
export interface Endpoint {
  /** The hostname of the compute endpoint. This is the hostname specified when connecting to a Neon database. */
  host: string;
  /** The compute endpoint ID. Compute endpoint IDs have an `ep-` prefix. For example: `ep-little-smoke-851426` */
  id: string;
  /** The ID of the project to which the compute endpoint belongs */
  project_id: string;
  /** The ID of the branch that the compute endpoint is associated with */
  branch_id: string;
  /** The minimum number of Compute Units */
  autoscaling_limit_min_cu: ComputeUnit;
  /** The maximum number of Compute Units */
  autoscaling_limit_max_cu: ComputeUnit;
  /** The region identifier */
  region_id: string;
  /**
   * The compute endpoint type. Either `read_write` or `read_only`.
   * The `read_only` compute endpoint type is not yet supported.
   */
  type: EndpointType;
  /** The state of the compute endpoint */
  current_state: EndpointState;
  /** The state of the compute endpoint */
  pending_state?: EndpointState;
  /** A collection of settings for a compute endpoint */
  settings: EndpointSettingsData;
  /** Whether connection pooling is enabled for the compute endpoint */
  pooler_enabled: boolean;
  /** The connection pooler mode. Neon supports PgBouncer in `transaction` mode only. */
  pooler_mode: EndpointPoolerMode;
  /**
   * Whether to restrict connections to the compute endpoint.
   * Enabling this option schedules a suspend compute operation.
   * A disabled compute endpoint cannot be enabled by a connection or
   * console action. However, the compute endpoint is periodically
   * enabled by check_availability operations.
   */
  disabled: boolean;
  /** Whether to permit passwordless access to the compute endpoint */
  passwordless_access: boolean;
  /**
   * A timestamp indicating when the compute endpoint was last active
   * @format date-time
   */
  last_active?: string;
  /** The compute endpoint creation source */
  creation_source: string;
  /**
   * A timestamp indicating when the compute endpoint was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the compute endpoint was last updated
   * @format date-time
   */
  updated_at: string;
  /** DEPRECATED. Use the "host" property instead. */
  proxy_host: string;
  /**
   * Duration of inactivity in seconds after which the compute endpoint is
   * automatically suspended. The value `0` means use the global default.
   * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
   * The minimum value is `60` seconds (1 minute).
   * The maximum value is `604800` seconds (1 week). For more information, see
   * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
   */
  suspend_timeout_seconds: SuspendTimeoutSeconds;
  /**
   * The Neon compute provisioner.
   * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
   */
  provisioner: Provisioner;
}

/** The state of the compute endpoint */
export enum EndpointState {
  Init = 'init',
  Active = 'active',
  Idle = 'idle',
}

/**
 * The compute endpoint type. Either `read_write` or `read_only`.
 * The `read_only` compute endpoint type is not yet supported.
 */
export enum EndpointType {
  ReadOnly = 'read_only',
  ReadWrite = 'read_write',
}

/** The connection pooler mode. Neon supports PgBouncer in `transaction` mode only. */
export enum EndpointPoolerMode {
  Transaction = 'transaction',
}

/**
 * Duration of inactivity in seconds after which the compute endpoint is
 * automatically suspended. The value `0` means use the global default.
 * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
 * The minimum value is `60` seconds (1 minute).
 * The maximum value is `604800` seconds (1 week). For more information, see
 * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
 * @format int64
 * @min -1
 * @max 604800
 */
export type SuspendTimeoutSeconds = number;

/**
 * A list of IP addresses that are allowed to connect to the compute endpoint.
 * If the list is empty or not set, all IP addresses are allowed.
 * If primary_branch_only is true, the list will be applied only to the primary branch.
 */
export interface AllowedIps {
  /** A list of IP addresses that are allowed to connect to the endpoint. */
  ips?: string[];
  /** If true, the list will be applied only to the primary branch. */
  primary_branch_only: boolean;
}

export interface EndpointCreateRequest {
  endpoint: {
    /** The ID of the branch the compute endpoint will be associated with */
    branch_id: string;
    /** The region where the compute endpoint will be created. Only the project's `region_id` is permitted. */
    region_id?: string;
    /**
     * The compute endpoint type. Either `read_write` or `read_only`.
     * The `read_only` compute endpoint type is not yet supported.
     */
    type: EndpointType;
    /** A collection of settings for a compute endpoint */
    settings?: EndpointSettingsData;
    /**
     * The minimum number of Compute Units. The minimum value is `0.25`.
     * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     */
    autoscaling_limit_min_cu?: ComputeUnit;
    /**
     * The maximum number of Compute Units.
     * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     */
    autoscaling_limit_max_cu?: ComputeUnit;
    /**
     * The Neon compute provisioner.
     * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
     */
    provisioner?: Provisioner;
    /**
     * Whether to enable connection pooling for the compute endpoint
     * @deprecated
     */
    pooler_enabled?: boolean;
    /** The connection pooler mode. Neon supports PgBouncer in `transaction` mode only. */
    pooler_mode?: EndpointPoolerMode;
    /**
     * Whether to restrict connections to the compute endpoint.
     * Enabling this option schedules a suspend compute operation.
     * A disabled compute endpoint cannot be enabled by a connection or
     * console action. However, the compute endpoint is periodically
     * enabled by check_availability operations.
     */
    disabled?: boolean;
    /** NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint. */
    passwordless_access?: boolean;
    /**
     * Duration of inactivity in seconds after which the compute endpoint is
     * automatically suspended. The value `0` means use the global default.
     * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
     * The minimum value is `60` seconds (1 minute).
     * The maximum value is `604800` seconds (1 week). For more information, see
     * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
     */
    suspend_timeout_seconds?: SuspendTimeoutSeconds;
  };
}

export interface EndpointUpdateRequest {
  endpoint: {
    /** The destination branch ID. The destination branch must not have an exsiting read-write endpoint. */
    branch_id?: string;
    /**
     * The minimum number of Compute Units. The minimum value is `0.25`.
     * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     */
    autoscaling_limit_min_cu?: ComputeUnit;
    /**
     * The maximum number of Compute Units.
     * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
     * for more information.
     */
    autoscaling_limit_max_cu?: ComputeUnit;
    /**
     * The Neon compute provisioner.
     * Specify the `k8s-neonvm` provisioner to create a compute endpoint that supports Autoscaling.
     */
    provisioner?: Provisioner;
    /** A collection of settings for a compute endpoint */
    settings?: EndpointSettingsData;
    /**
     * Whether to enable connection pooling for the compute endpoint
     * @deprecated
     */
    pooler_enabled?: boolean;
    /** The connection pooler mode. Neon supports PgBouncer in `transaction` mode only. */
    pooler_mode?: EndpointPoolerMode;
    /**
     * Whether to restrict connections to the compute endpoint.
     * Enabling this option schedules a suspend compute operation.
     * A disabled compute endpoint cannot be enabled by a connection or
     * console action. However, the compute endpoint is periodically
     * enabled by check_availability operations.
     */
    disabled?: boolean;
    /** NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint. */
    passwordless_access?: boolean;
    /**
     * Duration of inactivity in seconds after which the compute endpoint is
     * automatically suspended. The value `0` means use the global default.
     * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
     * The minimum value is `60` seconds (1 minute).
     * The maximum value is `604800` seconds (1 week). For more information, see
     * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
     */
    suspend_timeout_seconds?: SuspendTimeoutSeconds;
  };
}

export interface EndpointResponse {
  endpoint: Endpoint;
}

export interface ConnectionURIsResponse {
  connection_uris: ConnectionDetails[];
}

export interface ConnectionURIsOptionalResponse {
  connection_uris?: ConnectionDetails[];
}

export interface EndpointsResponse {
  endpoints: Endpoint[];
}

export interface EndpointPasswordlessSessionAuthRequest {
  session_id: string;
}

/**
 * A Duration represents the elapsed time between two instants
 * as an int64 nanosecond count. The representation limits the
 * largest representable duration to approximately 290 years.
 * @format int64
 */
export type Duration = number;

export interface StatementResult {
  data?: StatementData;
  error?: string;
  explain_data?: ExplainData[];
  query: string;
}

export interface StatementData {
  fields?: string[];
  rows?: string[][];
  truncated: boolean;
}

export interface ExplainData {
  'QUERY PLAN': string;
}

/** @example {"branch_id":"br-wispy-meadow-118737","name":"casey","protected":false,"created_at":"2022-11-23T17:42:25Z","updated_at":"2022-11-23T17:42:25Z"} */
export interface Role {
  /** The ID of the branch to which the role belongs */
  branch_id: string;
  /** The role name */
  name: string;
  /** The role password */
  password?: string;
  /** Whether or not the role is system-protected */
  protected?: boolean;
  /**
   * A timestamp indicating when the role was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the role was last updated
   * @format date-time
   */
  updated_at: string;
}

export interface RoleCreateRequest {
  role: {
    /** The role name. Cannot exceed 63 bytes in length. */
    name: string;
  };
}

export interface RoleResponse {
  role: Role;
}

export interface RolesResponse {
  roles: Role[];
}

export interface RolePasswordResponse {
  /** The role password */
  password: string;
}

export interface PaymentSourceBankCard {
  /** Last 4 digits of the card. */
  last4: string;
  /** Brand of credit card. */
  brand?: 'amex' | 'diners' | 'discover' | 'jcb' | 'mastercard' | 'unionpay' | 'unknown' | 'visa';
  /**
   * Credit card expiration month
   * @format int64
   */
  exp_month?: number;
  /**
   * Credit card expiration year
   * @format int64
   */
  exp_year?: number;
}

export interface PaymentSource {
  /** Type of payment source. E.g. "card". */
  type: string;
  card?: PaymentSourceBankCard;
}

export interface BillingAccount {
  payment_source: PaymentSource;
  /**
   * Type of subscription to Neon Cloud.
   * Notice that for users without billing account this will be "UNKNOWN"
   */
  subscription_type: BillingSubscriptionType;
  /**
   * The last time the quota was reset. Defaults to the date-time the account is created.
   * @format date-time
   */
  quota_reset_at_last: string;
  /** Billing email, to receive emails related to invoices and subscriptions. */
  email: string;
  /** Billing address city. */
  address_city: string;
  /** Billing address country. */
  address_country: string;
  /** Billing address line 1. */
  address_line1: string;
  /** Billing address line 2. */
  address_line2: string;
  /** Billing address postal code. */
  address_postal_code: string;
  /** Billing address state or region. */
  address_state: string;
  /** Orb user portal url */
  orb_portal_url?: string;
}

export interface BillingAccountUpdateRequest {
  billing_account: {
    /** Billing email, to receive emails related to invoices and subscriptions. */
    email?: string;
  };
}

export interface BillingAccountResponse {
  billing_account: BillingAccount;
}

/**
 * Type of subscription to Neon Cloud.
 * Notice that for users without billing account this will be "UNKNOWN"
 */
export enum BillingSubscriptionType {
  UNKNOWN = 'UNKNOWN',
  Free = 'free',
  Pro = 'pro',
  DirectSales = 'direct_sales',
  AwsMarketplace = 'aws_marketplace',
  FreeV2 = 'free_v2',
  Launch = 'launch',
  Scale = 'scale',
}

/** @example {"id":834686,"branch_id":"br-wispy-meadow-118737","name":"neondb","owner_name":"casey","created_at":"2022-11-30T18:25:15Z","updated_at":"2022-11-30T18:25:15Z"} */
export interface Database {
  /**
   * The database ID
   * @format int64
   */
  id: number;
  /** The ID of the branch to which the database belongs */
  branch_id: string;
  /** The database name */
  name: string;
  /** The name of role that owns the database */
  owner_name: string;
  /**
   * A timestamp indicating when the database was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the database was last updated
   * @format date-time
   */
  updated_at: string;
}

export interface DatabaseCreateRequest {
  database: {
    /** The name of the datbase */
    name: string;
    /** The name of the role that owns the database */
    owner_name: string;
  };
}

export interface DatabaseUpdateRequest {
  database: {
    /** The name of the database */
    name?: string;
    /** The name of the role that owns the database */
    owner_name?: string;
  };
}

export interface DatabaseResponse {
  database: Database;
}

export interface DatabasesResponse {
  databases: Database[];
}

export interface Invitation {
  /** @format uuid */
  id: string;
  /**
   * Email of the invited user
   * @format email
   */
  email: string;
  /** Organization uuid as it is stored in Neon */
  org_id: string;
  /**
   * UUID for the user_id who extended the invitation
   * @format uuid
   */
  invited_by: string;
  /**
   * Timestamp when the invitation was created
   * @format date-time
   */
  invited_at: string;
  /** The role of the organization member */
  role: MemberRole;
}

/** The role of the organization member */
export enum MemberRole {
  Admin = 'admin',
  Member = 'member',
}

export interface Member {
  /** @format uuid */
  id: string;
  /** @format uuid */
  user_id: string;
  org_id: string;
  /** The role of the organization member */
  role: MemberRole;
  /** @format date-time */
  joined_at?: string;
}

export interface MemberUserInfo {
  email: string;
  name: string;
  last_name: string;
}

export interface MemberWithUser {
  member: Member;
  user: MemberUserInfo;
}

export interface Organization {
  id: string;
  name: string;
  /**
   * A timestamp indicting when the organization was created
   * @format date-time
   */
  created_at: string;
  /**
   * A timestamp indicating when the organization was updated
   * @format date-time
   */
  updated_at: string;
}

export interface OrganizationsUpdateRequest {
  name: string;
}

export interface OrganizationInvitationsResponse {
  invitations: Invitation[];
}

export interface OrganizationInviteCreateRequest {
  /** @format email */
  email: string;
  /** The role of the organization member */
  role: MemberRole;
}

export interface OrganizationInvitesCreateRequest {
  invitations: OrganizationInviteCreateRequest[];
}

export interface OrganizationInviteUpdateRequest {
  /** @format email */
  email?: string;
  /** The role of the organization member */
  role?: MemberRole;
  resend?: boolean;
}

/** A list of details for guests of an organisation */
export type OrganizationGuestsResponse = {
  user_id?: string;
  user_email?: string;
  project_id?: string;
  project_name?: string;
}[];

export interface OrganizationMemberUpdateRequest {
  /** The role of the organization member */
  role: MemberRole;
}

export interface OrganizationMembersResponse {
  members: MemberWithUser[];
}

export interface InvitationCreateRequest {
  /** Email to invite */
  email: string;
  /** The role of the organization member */
  role: MemberRole;
}

export interface OrganizationCreateRequest {
  organization: {
    /** The organization name */
    name?: string;
    /** Emails with roles to invite to the organization */
    invitations?: InvitationCreateRequest[];
  };
  /**
   * Type of subscription to Neon Cloud.
   * Notice that for users without billing account this will be "UNKNOWN"
   */
  subscription_type: BillingSubscriptionType;
}

export interface CurrentUserAuthAccount {
  email: string;
  image: string;
  login: string;
  name: string;
  /** Identity provider id from keycloak */
  provider: IdentityProviderId;
}

export interface LinkedAuthAccount {
  /** Identity provider id from keycloak */
  provider: IdentityProviderId;
  provider_display_name: string;
  username: string;
}

export interface UpdateUserInfoRequest {
  email?: string;
  /** @format uuid */
  id: string;
  image?: string;
  first_name?: string;
  last_name?: string;
  password?: string;
  new_password?: string;
}

export interface CurrentUserInfoResponse {
  /**
   * Control plane observes active endpoints of a user this amount of wall-clock time.
   * @format int64
   */
  active_seconds_limit: number;
  billing_account: BillingAccount;
  auth_accounts: CurrentUserAuthAccount[];
  email: string;
  id: string;
  image: string;
  login: string;
  name: string;
  last_name: string;
  /** @format int64 */
  projects_limit: number;
  /** @format int64 */
  branches_limit: number;
  max_autoscaling_limit: ComputeUnit;
  /** @format int64 */
  compute_seconds_limit?: number;
  plan: string;
}

export interface CurrentUserInfoAuthResponse {
  password_stored: boolean;
  auth_accounts: CurrentUserAuthAccount[];
  linked_accounts: LinkedAuthAccount[];
}

export interface VerifyUserPasswordRequest {
  password: string;
}

/** Identity provider id from keycloak */
export enum IdentityProviderId {
  Github = 'github',
  Google = 'google',
  Hasura = 'hasura',
  Keycloak = 'keycloak',
}

/** A collection of settings for a compute endpoint */
export interface EndpointSettingsData {
  /** A raw representation of Postgres settings */
  pg_settings?: PgSettingsData;
  /** A raw representation of PgBouncer settings */
  pgbouncer_settings?: PgbouncerSettingsData;
}

/**
 * Per-project consumption quota. If the quota is exceeded, all active computes
 * are automatically suspended and it will not be possible to start them with
 * an API method call or incoming proxy connections. The only exception is
 * `logical_size_bytes`, which is applied on per-branch basis, i.e., only the
 * compute on the branch that exceeds the `logical_size` quota will be suspended.
 *
 * Quotas are enforced based on per-project consumption metrics with the same names,
 * which are reset at the end of each billing period (the first day of the month).
 * Logical size is also an exception in this case, as it represents the total size
 * of data stored in a branch, so it is not reset.
 *
 * A zero or empty quota value means 'unlimited'.
 */
export interface ProjectQuota {
  /**
   * The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
   * @format int64
   * @min 0
   */
  active_time_seconds?: number;
  /**
   * The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
   * @format int64
   * @min 0
   */
  compute_time_seconds?: number;
  /**
   * Total amount of data written to all of a project's branches.
   * @format int64
   * @min 0
   */
  written_data_bytes?: number;
  /**
   * Total amount of data transferred from all of a project's branches using the proxy.
   * @format int64
   * @min 0
   */
  data_transfer_bytes?: number;
  /**
   * Limit on the logical size of every project's branch.
   * @format int64
   * @min 0
   */
  logical_size_bytes?: number;
}

/** A collection of settings for a Neon endpoint */
export interface DefaultEndpointSettings {
  /** A raw representation of Postgres settings */
  pg_settings?: PgSettingsData;
  /** A raw representation of PgBouncer settings */
  pgbouncer_settings?: PgbouncerSettingsData;
  /**
   * The minimum number of Compute Units. The minimum value is `0.25`.
   * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
   * for more information.
   */
  autoscaling_limit_min_cu?: ComputeUnit;
  /**
   * The maximum number of Compute Units. See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
   * for more information.
   */
  autoscaling_limit_max_cu?: ComputeUnit;
  /**
   * Duration of inactivity in seconds after which the compute endpoint is
   * automatically suspended. The value `0` means use the global default.
   * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
   * The minimum value is `60` seconds (1 minute).
   * The maximum value is `604800` seconds (1 week). For more information, see
   * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
   */
  suspend_timeout_seconds?: SuspendTimeoutSeconds;
  [key: string]: any;
}

/** A raw representation of Postgres settings */
export type PgSettingsData = Record<string, string>;

/** A raw representation of PgBouncer settings */
export type PgbouncerSettingsData = Record<string, string>;

/**
 * The major Postgres version number. Currently supported versions are `14`, `15`, and `16`.
 * @min 14
 * @max 16
 * @default 16
 */
export type PgVersion = number;

/** @example {"status":"ok"} */
export interface HealthCheck {
  /** Service status */
  status: string;
}

export interface ProjectOwnerData {
  email: string;
  branches_limit: number;
  /**
   * Type of subscription to Neon Cloud.
   * Notice that for users without billing account this will be "UNKNOWN"
   */
  subscription_type: BillingSubscriptionType;
}

/** General Error */
export interface GeneralError {
  code: ErrorCode;
  /** Error message */
  message: string;
}

export type ErrorCode = string;

export type BranchOperations = BranchResponse & OperationsResponse;

export type EndpointOperations = EndpointResponse & OperationsResponse;

export type DatabaseOperations = DatabaseResponse & OperationsResponse;

export type RoleOperations = RoleResponse & OperationsResponse;

export enum SupportTicketSeverity {
  Low = 'low',
  Normal = 'normal',
  High = 'high',
  Critical = 'critical',
}

export interface ListProjectsParams {
  /** Specify the cursor value from the previous response to get the next batch of projects. */
  cursor?: string;
  /**
   * Specify a value from 1 to 400 to limit number of projects in the response.
   * @min 1
   * @max 400
   * @default 10
   */
  limit?: number;
  /** Search query by name or id. */
  search?: string;
}

export interface ListSharedProjectsParams {
  /** Specify the cursor value from the previous response to get the next batch of projects. */
  cursor?: string;
  /**
   * Specify a value from 1 to 400 to limit number of projects in the response.
   * @min 1
   * @max 400
   * @default 10
   */
  limit?: number;
  /** Search query by name or id. */
  search?: string;
}

export interface ListProjectOperationsParams {
  /** Specify the cursor value from the previous response to get the next batch of operations */
  cursor?: string;
  /**
   * Specify a value from 1 to 1000 to limit number of operations in the response
   * @min 1
   * @max 1000
   */
  limit?: number;
  /** The Neon project ID */
  projectId: string;
}

export interface GetConnectionUriParams {
  /** The branch ID. Defaults to your project's primary `branch_id` if not specified. */
  branch_id?: string;
  /** The endpoint ID. Defaults to the read-write `endpoint_id` associated with the `branch_id` if not specified. */
  endpoint_id?: string;
  /** The database name */
  database_name: string;
  /** The role name */
  role_name: string;
  /** Adds the `-pooler` option to the connection URI when set to `true`, creating a pooled connection URI. */
  pooled?: boolean;
  /** The Neon project ID */
  projectId: string;
}

export interface ListProjectsConsumptionParams {
  /** Specify the cursor value from the previous response to get the next batch of projects */
  cursor?: string;
  /**
   * Specify a value from 1 to 1000 to limit number of projects in the response
   * @min 1
   * @max 1000
   * @default 10
   */
  limit?: number;
  /**
   * Specify the start date-time for the consumption period.
   * The time value must be provided in ISO 8601 format.
   * If `from` or `to` is not specified, we return only current consumption period.
   * @format date-time
   */
  from?: string;
  /**
   * Specify the end date-time period for the consumption period.
   * The time value must be provided in ISO 8601 format.
   * If `from` or `to` is not specified, only the current consumption period is returned.
   * @format date-time
   */
  to?: string;
}

import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, HeadersDefaults, ResponseType } from 'axios';
import axios from 'axios';

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestParams extends Omit<AxiosRequestConfig, 'data' | 'params' | 'url' | 'responseType'> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseType;
  /** request body */
  body?: unknown;
}

export type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>;

export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, 'data' | 'cancelToken'> {
  securityWorker?: (
    securityData: SecurityDataType | null,
  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  format?: ResponseType;
}

export enum ContentType {
  Json = 'application/json',
  FormData = 'multipart/form-data',
  UrlEncoded = 'application/x-www-form-urlencoded',
  Text = 'text/plain',
}

export class HttpClient<SecurityDataType = unknown> {
  public instance: AxiosInstance;
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker'];
  private secure?: boolean;
  private format?: ResponseType;

  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {
    this.instance = axios.create({
      ...axiosConfig,
      baseURL: axiosConfig.baseURL || 'https://console.neon.tech/api/v2',
    });
    this.secure = secure;
    this.format = format;
    this.securityWorker = securityWorker;
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {
    const method = params1.method || (params2 && params2.method);

    return {
      ...this.instance.defaults,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected stringifyFormItem(formItem: unknown) {
    if (typeof formItem === 'object' && formItem !== null) {
      return JSON.stringify(formItem);
    } else {
      return `${formItem}`;
    }
  }

  protected createFormData(input: Record<string, unknown>): FormData {
    return Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      const propertyContent: any[] = property instanceof Array ? property : [property];

      for (const formItem of propertyContent) {
        const isFileType = formItem instanceof Blob || formItem instanceof File;
        formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));
      }

      return formData;
    }, new FormData());
  }

  public request = async <T = any, _E = any>({
    secure,
    path,
    type,
    query,
    format,
    body,
    ...params
  }: FullRequestParams): Promise<AxiosResponse<T>> => {
    const secureParams =
      ((typeof secure === 'boolean' ? secure : this.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const responseFormat = format || this.format || undefined;

    if (type === ContentType.FormData && body && body !== null && typeof body === 'object') {
      body = this.createFormData(body as Record<string, unknown>);
    }

    if (type === ContentType.Text && body && body !== null && typeof body !== 'string') {
      body = JSON.stringify(body);
    }

    return this.instance.request({
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),
      },
      params: query,
      responseType: responseFormat,
      data: body,
      url: path,
    });
  };
}

/**
 * @title Neon API
 * @version v2
 * @license Proprietary
 * @baseUrl https://console.neon.tech/api/v2
 * @contact <support@neon.tech>
 *
 * The Neon API allows you to access and manage Neon programmatically. You can use the Neon API to manage API keys, projects, branches, compute endpoints, databases, roles, and operations. For information about these features, refer to the [Neon documentation](https://neon.tech/docs/manage/overview/).
 *
 * You can run Neon API requests from this API reference using the **Try It** feature. Enter your API key as a **Bearer** token in the **Authoization** section of the page.
 *
 * You can create and manage API keys in the Neon Console. See [Manage API keys](https://neon.tech/docs/manage/api-keys/) for instructions.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * @description Retrieves the API keys for your Neon account. The response does not include API key tokens. A token is only provided when creating an API key. API keys can also be managed in the Neon Console. For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   *
   * @tags API Key
   * @name ListApiKeys
   * @summary Get a list of API keys
   * @request GET:/api_keys
   * @secure
   */
  listApiKeys = (params: RequestParams = {}) =>
    this.request<ApiKeysListResponseItem[], GeneralError>({
      path: `/api_keys`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates an API key. The `key_name` is a user-specified name for the key. This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API. API keys can also be managed in the Neon Console. See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   *
   * @tags API Key
   * @name CreateApiKey
   * @summary Create an API key
   * @request POST:/api_keys
   * @secure
   */
  createApiKey = (data: ApiKeyCreateRequest, params: RequestParams = {}) =>
    this.request<ApiKeyCreateResponse, GeneralError>({
      path: `/api_keys`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Revokes the specified API key. An API key that is no longer needed can be revoked. This action cannot be reversed. You can obtain `key_id` values by listing the API keys for your Neon account. API keys can also be managed in the Neon Console. See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   *
   * @tags API Key
   * @name RevokeApiKey
   * @summary Revoke an API key
   * @request DELETE:/api_keys/{key_id}
   * @secure
   */
  revokeApiKey = (keyId: number, params: RequestParams = {}) =>
    this.request<ApiKeyRevokeResponse, GeneralError>({
      path: `/api_keys/${encodeURIComponent(keyId)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves details for the specified operation. An operation is an action performed on a Neon project resource. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain a `operation_id` by listing operations for the project.
   *
   * @tags Operation
   * @name GetProjectOperation
   * @summary Get operation details
   * @request GET:/projects/{project_id}/operations/{operation_id}
   * @secure
   */
  getProjectOperation = (projectId: string, operationId: string, params: RequestParams = {}) =>
    this.request<OperationResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/operations/${encodeURIComponent(operationId)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of projects for the Neon account. A project is the top-level object in the Neon object hierarchy. For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
   *
   * @tags Project
   * @name ListProjects
   * @summary Get a list of projects
   * @request GET:/projects
   * @secure
   */
  listProjects = (query: ListProjectsParams, params: RequestParams = {}) =>
    this.request<ProjectsResponse & PaginationResponse, GeneralError>({
      path: `/projects`,
      method: 'GET',
      query: query,
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates a Neon project. A project is the top-level object in the Neon object hierarchy. Plan limits define how many projects you can create. Neon's Free plan permits one project per Neon account. For more information, see [Manage projects](https://neon.tech/docs/manage/projects/). You can specify a region and Postgres version in the request body. Neon currently supports PostgreSQL 14, 15, and 16. For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
   *
   * @tags Project
   * @name CreateProject
   * @summary Create a project
   * @request POST:/projects
   * @secure
   */
  createProject = (data: ProjectCreateRequest, params: RequestParams = {}) =>
    this.request<
      ProjectResponse &
        ConnectionURIsResponse &
        RolesResponse &
        DatabasesResponse &
        OperationsResponse &
        BranchResponse &
        EndpointsResponse,
      GeneralError
    >({
      path: `/projects`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      ...params,
    });

  /**
   * @description Retrieves a list of shared projects for the Neon account. A project is the top-level object in the Neon object hierarchy. For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
   *
   * @tags Project
   * @name ListSharedProjects
   * @summary Get a list of shared projects
   * @request GET:/projects/shared
   * @secure
   */
  listSharedProjects = (query: ListSharedProjectsParams, params: RequestParams = {}) =>
    this.request<ProjectsResponse & PaginationResponse, GeneralError>({
      path: `/projects/shared`,
      method: 'GET',
      query: query,
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves information about the specified project. A project is the top-level object in the Neon object hierarchy. You can obtain a `project_id` by listing the projects for your Neon account.
   *
   * @tags Project
   * @name GetProject
   * @summary Get project details
   * @request GET:/projects/{project_id}
   * @secure
   */
  getProject = (projectId: string, params: RequestParams = {}) =>
    this.request<ProjectResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Updates the specified project. You can obtain a `project_id` by listing the projects for your Neon account. Neon permits updating the project name only.
   *
   * @tags Project
   * @name UpdateProject
   * @summary Update a project
   * @request PATCH:/projects/{project_id}
   * @secure
   */
  updateProject = (projectId: string, data: ProjectUpdateRequest, params: RequestParams = {}) =>
    this.request<ProjectResponse & OperationsResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}`,
      method: 'PATCH',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Deletes the specified project. You can obtain a `project_id` by listing the projects for your Neon account. Deleting a project is a permanent action. Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
   *
   * @tags Project
   * @name DeleteProject
   * @summary Delete a project
   * @request DELETE:/projects/{project_id}
   * @secure
   */
  deleteProject = (projectId: string, params: RequestParams = {}) =>
    this.request<ProjectResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of operations for the specified Neon project. You can obtain a `project_id` by listing the projects for your Neon account. The number of operations returned can be large. To paginate the response, issue an initial request with a `limit` value. Then, add the `cursor` value that was returned in the response to the next request.
   *
   * @tags Operation
   * @name ListProjectOperations
   * @summary Get a list of operations
   * @request GET:/projects/{project_id}/operations
   * @secure
   */
  listProjectOperations = ({ projectId, ...query }: ListProjectOperationsParams, params: RequestParams = {}) =>
    this.request<OperationsResponse & PaginationResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/operations`,
      method: 'GET',
      query: query,
      secure: true,
      ...params,
    });

  /**
   * @description Retrieves details about users who have access to the project, including the permission `id`, the granted-to email address, and the date project access was granted.
   *
   * @tags Project
   * @name ListProjectPermissions
   * @summary List project access
   * @request GET:/projects/{project_id}/permissions
   * @secure
   */
  listProjectPermissions = (projectId: string, params: RequestParams = {}) =>
    this.request<ProjectPermissions, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/permissions`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Grants project access to the account associated with the specified email address
   *
   * @tags Project
   * @name GrantPermissionToProject
   * @summary Grant project access
   * @request POST:/projects/{project_id}/permissions
   * @secure
   */
  grantPermissionToProject = (projectId: string, data: GrantPermissionToProjectRequest, params: RequestParams = {}) =>
    this.request<ProjectPermission, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/permissions`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Revokes project access from the user associted with the specified permisison `id`. You can retrieve a user's permission `id` by listing project access.
   *
   * @tags Project
   * @name RevokePermissionFromProject
   * @summary Revoke project access
   * @request DELETE:/projects/{project_id}/permissions/{permission_id}
   * @secure
   */
  revokePermissionFromProject = (projectId: string, permissionId: string, params: RequestParams = {}) =>
    this.request<ProjectPermission, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/permissions/${encodeURIComponent(permissionId)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a connection URI for the specified database. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `database_name` by listing the databases for a branch. You can obtain a `role_name` by listing the roles for a branch.
   *
   * @tags Project
   * @name GetConnectionUri
   * @summary Get a connection URI
   * @request GET:/projects/{project_id}/connection_uri
   * @secure
   */
  getConnectionUri = ({ projectId, ...query }: GetConnectionUriParams, params: RequestParams = {}) =>
    this.request<ConnectionURIResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/connection_uri`,
      method: 'GET',
      query: query,
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates a branch in the specified project. You can obtain a `project_id` by listing the projects for your Neon account. This method does not require a request body, but you can specify one to create a compute endpoint for the branch or to select a non-default parent branch. The default behavior is to create a branch from the project's primary branch with no compute endpoint, and the branch name is auto-generated. There is a maximum of one read-write endpoint per branch. A branch can have multiple read-only endpoints. For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   *
   * @tags Branch
   * @name CreateProjectBranch
   * @summary Create a branch
   * @request POST:/projects/{project_id}/branches
   * @secure
   */
  createProjectBranch = (projectId: string, data?: BranchCreateRequest, params: RequestParams = {}) =>
    this.request<
      BranchResponse &
        EndpointsResponse &
        OperationsResponse &
        RolesResponse &
        DatabasesResponse &
        ConnectionURIsOptionalResponse,
      GeneralError
    >({
      path: `/projects/${encodeURIComponent(projectId)}/branches`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      ...params,
    });

  /**
   * @description Retrieves a list of branches for the specified project. You can obtain a `project_id` by listing the projects for your Neon account. Each Neon project has a root branch named `main`. A `branch_id` value has a `br-` prefix. A project may contain child branches that were branched from `main` or from another branch. A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch. For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   *
   * @tags Branch
   * @name ListProjectBranches
   * @summary Get a list of branches
   * @request GET:/projects/{project_id}/branches
   * @secure
   */
  listProjectBranches = (projectId: string, params: RequestParams = {}) =>
    this.request<BranchesResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves information about the specified branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain a `branch_id` by listing the project's branches. A `branch_id` value has a `br-` prefix. Each Neon project is initially created with a root and primary branch named `main`. A project can contain one or more branches. A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch. For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   *
   * @tags Branch
   * @name GetProjectBranch
   * @summary Get branch details
   * @request GET:/projects/{project_id}/branches/{branch_id}
   * @secure
   */
  getProjectBranch = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<BranchResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Deletes the specified branch from a project, and places all compute endpoints into an idle state, breaking existing client connections. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain a `branch_id` by listing the project's branches. For related information, see [Manage branches](https://neon.tech/docs/manage/branches/). When a successful response status is received, the compute endpoints are still active, and the branch is not yet deleted from storage. The deletion occurs after all operations finish. You cannot delete a project's root or primary branch, and you cannot delete a branch that has a child branch. A project must have at least one branch.
   *
   * @tags Branch
   * @name DeleteProjectBranch
   * @summary Delete a branch
   * @request DELETE:/projects/{project_id}/branches/{branch_id}
   * @secure
   */
  deleteProjectBranch = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<BranchOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Updates the specified branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   *
   * @tags Branch
   * @name UpdateProjectBranch
   * @summary Update a branch
   * @request PATCH:/projects/{project_id}/branches/{branch_id}
   * @secure
   */
  updateProjectBranch = (projectId: string, branchId: string, data: BranchUpdateRequest, params: RequestParams = {}) =>
    this.request<BranchOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}`,
      method: 'PATCH',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Restores a branch to an earlier state in its own or another branch's history
   *
   * @tags Branch
   * @name RestoreProjectBranch
   * @summary Restore a branch
   * @request POST:/projects/{project_id}/branches/{branch_id}/restore
   * @secure
   */
  restoreProjectBranch = (
    projectId: string,
    branchId: string,
    data: BranchRestoreRequest,
    params: RequestParams = {},
  ) =>
    this.request<BranchOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/restore`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Sets the specified branch as the project's primary branch. The primary designation is automatically removed from the previous primary branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   *
   * @tags Branch
   * @name SetPrimaryProjectBranch
   * @summary Set branch as primary
   * @request POST:/projects/{project_id}/branches/{branch_id}/set_as_primary
   * @secure
   */
  setPrimaryProjectBranch = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<BranchOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/set_as_primary`,
      method: 'POST',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of compute endpoints for the specified branch. Neon permits only one read-write compute endpoint per branch. A branch can have multiple read-only compute endpoints. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches.
   *
   * @tags Branch
   * @name ListProjectBranchEndpoints
   * @summary Get a list of branch endpoints
   * @request GET:/projects/{project_id}/branches/{branch_id}/endpoints
   * @secure
   */
  listProjectBranchEndpoints = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<EndpointsResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/endpoints`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of databases for the specified branch. A branch can have multiple databases. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   *
   * @tags Branch
   * @name ListProjectBranchDatabases
   * @summary Get a list of databases
   * @request GET:/projects/{project_id}/branches/{branch_id}/databases
   * @secure
   */
  listProjectBranchDatabases = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<DatabasesResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/databases`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates a database in the specified branch. A branch can have multiple databases. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   *
   * @tags Branch
   * @name CreateProjectBranchDatabase
   * @summary Create a database
   * @request POST:/projects/{project_id}/branches/{branch_id}/databases
   * @secure
   */
  createProjectBranchDatabase = (
    projectId: string,
    branchId: string,
    data: DatabaseCreateRequest,
    params: RequestParams = {},
  ) =>
    this.request<DatabaseOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/databases`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves information about the specified database. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` and `database_name` by listing the branch's databases. For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   *
   * @tags Branch
   * @name GetProjectBranchDatabase
   * @summary Get database details
   * @request GET:/projects/{project_id}/branches/{branch_id}/databases/{database_name}
   * @secure
   */
  getProjectBranchDatabase = (projectId: string, branchId: string, databaseName: string, params: RequestParams = {}) =>
    this.request<DatabaseResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/databases/${encodeURIComponent(databaseName)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Updates the specified database in the branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` and `database_name` by listing the branch's databases. For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   *
   * @tags Branch
   * @name UpdateProjectBranchDatabase
   * @summary Update a database
   * @request PATCH:/projects/{project_id}/branches/{branch_id}/databases/{database_name}
   * @secure
   */
  updateProjectBranchDatabase = (
    projectId: string,
    branchId: string,
    databaseName: string,
    data: DatabaseUpdateRequest,
    params: RequestParams = {},
  ) =>
    this.request<DatabaseOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/databases/${encodeURIComponent(databaseName)}`,
      method: 'PATCH',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Deletes the specified database from the branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` and `database_name` by listing the branch's databases. For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   *
   * @tags Branch
   * @name DeleteProjectBranchDatabase
   * @summary Delete a database
   * @request DELETE:/projects/{project_id}/branches/{branch_id}/databases/{database_name}
   * @secure
   */
  deleteProjectBranchDatabase = (
    projectId: string,
    branchId: string,
    databaseName: string,
    params: RequestParams = {},
  ) =>
    this.request<DatabaseOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/databases/${encodeURIComponent(databaseName)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of Postgres roles from the specified branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   *
   * @tags Branch
   * @name ListProjectBranchRoles
   * @summary Get a list of roles
   * @request GET:/projects/{project_id}/branches/{branch_id}/roles
   * @secure
   */
  listProjectBranchRoles = (projectId: string, branchId: string, params: RequestParams = {}) =>
    this.request<RolesResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/roles`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates a Postgres role in the specified branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/). Connections established to the active compute endpoint will be dropped. If the compute endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
   *
   * @tags Branch
   * @name CreateProjectBranchRole
   * @summary Create a role
   * @request POST:/projects/{project_id}/branches/{branch_id}/roles
   * @secure
   */
  createProjectBranchRole = (
    projectId: string,
    branchId: string,
    data: RoleCreateRequest,
    params: RequestParams = {},
  ) =>
    this.request<RoleOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(branchId)}/roles`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves details about the specified role. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. You can obtain the `role_name` by listing the roles for a branch. In Neon, the terms "role" and "user" are synonymous. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   *
   * @tags Branch
   * @name GetProjectBranchRole
   * @summary Get role details
   * @request GET:/projects/{project_id}/branches/{branch_id}/roles/{role_name}
   * @secure
   */
  getProjectBranchRole = (projectId: string, branchId: string, roleName: string, params: RequestParams = {}) =>
    this.request<RoleResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/roles/${encodeURIComponent(roleName)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Deletes the specified Postgres role from the branch. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. You can obtain the `role_name` by listing the roles for a branch. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   *
   * @tags Branch
   * @name DeleteProjectBranchRole
   * @summary Delete a role
   * @request DELETE:/projects/{project_id}/branches/{branch_id}/roles/{role_name}
   * @secure
   */
  deleteProjectBranchRole = (projectId: string, branchId: string, roleName: string, params: RequestParams = {}) =>
    this.request<RoleOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/roles/${encodeURIComponent(roleName)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves the password for the specified Postgres role, if possible. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. You can obtain the `role_name` by listing the roles for a branch. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   *
   * @tags Branch
   * @name GetProjectBranchRolePassword
   * @summary Get role password
   * @request GET:/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password
   * @secure
   */
  getProjectBranchRolePassword = (projectId: string, branchId: string, roleName: string, params: RequestParams = {}) =>
    this.request<RolePasswordResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/roles/${encodeURIComponent(roleName)}/reveal_password`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Resets the password for the specified Postgres role. Returns a new password and operations. The new password is ready to use when the last operation finishes. The old password remains valid until last operation finishes. Connections to the compute endpoint are dropped. If idle, the compute endpoint becomes active for a short period of time. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain the `branch_id` by listing the project's branches. You can obtain the `role_name` by listing the roles for a branch. For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   *
   * @tags Branch
   * @name ResetProjectBranchRolePassword
   * @summary Reset the role password
   * @request POST:/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password
   * @secure
   */
  resetProjectBranchRolePassword = (
    projectId: string,
    branchId: string,
    roleName: string,
    params: RequestParams = {},
  ) =>
    this.request<RoleOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/branches/${encodeURIComponent(
        branchId,
      )}/roles/${encodeURIComponent(roleName)}/reset_password`,
      method: 'POST',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Creates a compute endpoint for the specified branch. An endpoint is a Neon compute instance. There is a maximum of one read-write compute endpoint per branch. If the specified branch already has a read-write compute endpoint, the operation fails. A branch can have multiple read-only compute endpoints. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain `branch_id` by listing the project's branches. A `branch_id` has a `br-` prefix. For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/). For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name CreateProjectEndpoint
   * @summary Create a compute endpoint
   * @request POST:/projects/{project_id}/endpoints
   * @secure
   */
  createProjectEndpoint = (projectId: string, data: EndpointCreateRequest, params: RequestParams = {}) =>
    this.request<EndpointOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints`,
      method: 'POST',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves a list of compute endpoints for the specified project. A compute endpoint is a Neon compute instance. You can obtain a `project_id` by listing the projects for your Neon account. For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name ListProjectEndpoints
   * @summary Get a list of compute endpoints
   * @request GET:/projects/{project_id}/endpoints
   * @secure
   */
  listProjectEndpoints = (projectId: string, params: RequestParams = {}) =>
    this.request<EndpointsResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves information about the specified compute endpoint. A compute endpoint is a Neon compute instance. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain an `endpoint_id` by listing your project's compute endpoints. An `endpoint_id` has an `ep-` prefix. For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name GetProjectEndpoint
   * @summary Get a compute endpoint
   * @request GET:/projects/{project_id}/endpoints/{endpoint_id}
   * @secure
   */
  getProjectEndpoint = (projectId: string, endpointId: string, params: RequestParams = {}) =>
    this.request<EndpointResponse, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints/${encodeURIComponent(endpointId)}`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Delete the specified compute endpoint. A compute endpoint is a Neon compute instance. Deleting a compute endpoint drops existing network connections to the compute endpoint. The deletion is completed when last operation in the chain finishes successfully. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain an `endpoint_id` by listing your project's compute endpoints. An `endpoint_id` has an `ep-` prefix. For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name DeleteProjectEndpoint
   * @summary Delete a compute endpoint
   * @request DELETE:/projects/{project_id}/endpoints/{endpoint_id}
   * @secure
   */
  deleteProjectEndpoint = (projectId: string, endpointId: string, params: RequestParams = {}) =>
    this.request<EndpointOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints/${encodeURIComponent(endpointId)}`,
      method: 'DELETE',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Updates the specified compute endpoint. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain an `endpoint_id` and `branch_id` by listing your project's compute endpoints. An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix. For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/). If the returned list of operations is not empty, the compute endpoint is not ready to use. The client must wait for the last operation to finish before using the compute endpoint. If the compute endpoint was idle before the update, it becomes active for a short period of time, and the control plane suspends it again after the update.
   *
   * @tags Endpoint
   * @name UpdateProjectEndpoint
   * @summary Update a compute endpoint
   * @request PATCH:/projects/{project_id}/endpoints/{endpoint_id}
   * @secure
   */
  updateProjectEndpoint = (
    projectId: string,
    endpointId: string,
    data: EndpointUpdateRequest,
    params: RequestParams = {},
  ) =>
    this.request<EndpointOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints/${encodeURIComponent(endpointId)}`,
      method: 'PATCH',
      body: data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...params,
    });

  /**
   * @description Starts a compute endpoint. The compute endpoint is ready to use after the last operation in chain finishes successfully. You can obtain a `project_id` by listing the projects for your Neon account. You can obtain an `endpoint_id` by listing your project's compute endpoints. An `endpoint_id` has an `ep-` prefix. For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name StartProjectEndpoint
   * @summary Start a compute endpoint
   * @request POST:/projects/{project_id}/endpoints/{endpoint_id}/start
   * @secure
   */
  startProjectEndpoint = (projectId: string, endpointId: string, params: RequestParams = {}) =>
    this.request<EndpointOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints/${encodeURIComponent(endpointId)}/start`,
      method: 'POST',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Suspend the specified compute endpoint You can obtain a `project_id` by listing the projects for your Neon account. You can obtain an `endpoint_id` by listing your project's compute endpoints. An `endpoint_id` has an `ep-` prefix. For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
   *
   * @tags Endpoint
   * @name SuspendProjectEndpoint
   * @summary Suspend a compute endpoint
   * @request POST:/projects/{project_id}/endpoints/{endpoint_id}/suspend
   * @secure
   */
  suspendProjectEndpoint = (projectId: string, endpointId: string, params: RequestParams = {}) =>
    this.request<EndpointOperations, GeneralError>({
      path: `/projects/${encodeURIComponent(projectId)}/endpoints/${encodeURIComponent(endpointId)}/suspend`,
      method: 'POST',
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves consumption metrics for each project for the current billing period. For usage information, see [Retrieving metrics for all projects](https://neon.tech/docs/guides/partner-billing#retrieving-metrics-for-all-projects).
   *
   * @tags Consumption
   * @name ListProjectsConsumption
   * @summary Get project consumption metrics
   * @request GET:/consumption/projects
   * @secure
   */
  listProjectsConsumption = (query: ListProjectsConsumptionParams, params: RequestParams = {}) =>
    this.request<ProjectsConsumptionResponse & PaginationResponse, GeneralError>({
      path: `/consumption/projects`,
      method: 'GET',
      query: query,
      secure: true,
      format: 'json',
      ...params,
    });

  /**
   * @description Retrieves information about the current Neon user account.
   *
   * @tags Users
   * @name GetCurrentUserInfo
   * @summary Get current user details
   * @request GET:/users/me
   * @secure
   */
  getCurrentUserInfo = (params: RequestParams = {}) =>
    this.request<CurrentUserInfoResponse, GeneralError>({
      path: `/users/me`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...params,
    });
}
